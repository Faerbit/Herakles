apply plugin: 'com.android.application'

def getVersionCode = { ->
    try {
        def hash = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--tags', '--no-walk', '--max-count=1'
            standardOutput = hash
        }
        hash = hash.toString().trim()
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', hash + '..HEAD', '--count'
            standardOutput = stdout
        }
        return Integer.parseInt(stdout.toString().trim())
    }
    catch (ignored) {
        return -1;
    }
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--long'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null;
    }
}

def keystorePropertiesFile = rootProject.file("keystore.properties")

def keystoreProperties = new Properties()

keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def renameApk(variant, defaultConfig) {
    variant.outputs.each { output ->
        def buildType = ""
        def file = output.packageApplication.outputFile
        if (file.name.contains("release")) {
            buildType = "release"
        }
        else {
            buildType = "debug"
        }
        def fileName = defaultConfig.applicationId + "-" + defaultConfig.versionName + "-" + defaultConfig.versionCode + "-" + buildType + ".apk"
        if (buildType == "release") {
            output.packageApplication.outputFile = new File(rootDir, fileName)
        }
        else {
            output.packageApplication.outputFile = new File(file.parent, fileName)
        }
    }
}

android {
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileSdkVersion 23
    buildToolsVersion "23.0.3"
    defaultConfig {
        applicationId "it.faerb.herakles"
        minSdkVersion 17
        targetSdkVersion 23
        versionCode getVersionCode()
        versionName getVersionName()
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            manifestPlaceholders = [applicationLabel: "@string/app_name_debug"]
            applicationVariants.all { variant ->
                renameApk(variant, defaultConfig)
            }
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [applicationLabel: "@string/app_name"]
            signingConfig signingConfigs.release
            applicationVariants.all { variant ->
                renameApk(variant, defaultConfig)
            }
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.3.0'
    compile 'com.android.support:design:23.3.0'
    compile 'org.osmdroid:osmdroid-android:5.1@aar'
    compile 'com.android.support:support-v4:23.3.0'
    compile 'com.android.support:recyclerview-v7:23.3.0'
    compile 'com.google.code.gson:gson:2.6.2'
}
